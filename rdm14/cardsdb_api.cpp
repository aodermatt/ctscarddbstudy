/*
 * Raima Database C++ Source File
 * This file is autogenerated, please don't edit the file
*/

#include "cardsdb_api.h"
#include "cardsdb_cat.h"

using namespace RDM_CPP;

Db_cardsdb Db_cardsdb::Open (
    const char *name,
    RDM_OPEN_MODE mode
    ) throw (const rdm_exception&)
{
    return Db::Open (name, mode, cardsdb_cat);
}

#if !defined(RDM_NO_UNICODE)
Db_cardsdb Db_cardsdb::Open (
    const wchar_t *name,
    RDM_OPEN_MODE mode
    ) throw (const rdm_exception&)
{
    return Db::Open (name, mode, cardsdb_cat);
}
#endif /*RDM_NO_UNICODE*/

dbType Db_cardsdb::Type (
    void
    )
{
    static char const type = '\0';
    return &type;
}

Db_cardsdb::Db_cardsdb (
    void
    ) throw ()
{
}

Db_cardsdb::Db_cardsdb (
    const Db& db
    ) throw () : Db (db, Type())
{
}

Db_cardsdb::Db_cardsdb (
    const Db_cardsdb& db
    ) throw () : Db (db)
{
}

Db_cardsdb::Db_cardsdb (
    IDb *idb
    ) : Db (idb)
{
}

Db_cardsdb& Db_cardsdb::operator = (
    const Db& db
    ) throw (const rdm_exception&)
{
    return static_cast<Db_cardsdb&>(_AssignAndVerifyType (Type (), db)); /*lint !e1772 ('*this' is being returned from the called function) */ /*lint !e1774 (AssignedAndVerifyType will make sure this is the right type, so static_check is sufficient) */
} /*lint !e1529 (checking for assignment to 'this' in the called function) */

Db_cardsdb& Db_cardsdb::operator = (
    const Db_cardsdb& db
    ) throw ()
{
    return static_cast<Db_cardsdb&>(_AssignAndVerifyType (Type (), static_cast<const Db&>(db))); /*lint !e1772 ('*this' is being returned from the called function) */ /*lint !e1774 (AssignedAndVerifyType will make sure this is the right type, so static_check is sufficient) */
} /*lint !e1529 (checking for assignment to 'this' in the called function) */

Db_cardsdb::~Db_cardsdb ()
{
}

Cursor_card_info Db_cardsdb::Insert_card_info_Row (
    const CARD_INFO& columnValues
    ) const throw (const rdm_exception&)
{
    return Cursor_card_info (_InsertRow (Cursor_card_info::GetTableId (), &columnValues));
}

Cursor_card_access_rules Db_cardsdb::Insert_card_access_rules_Row (
    const CARD_ACCESS_RULES& columnValues
    ) const throw (const rdm_exception&)
{
    return Cursor_card_access_rules (_InsertRow (Cursor_card_access_rules::GetTableId (), &columnValues));
}

Cursor_card_info Db_cardsdb::Get_card_info_Rows (
    RDM_ROWID_T rowId
    ) const throw (const rdm_exception&)
{
    return Cursor_card_info (_GetRows (Cursor_card_info::GetTableId (), rowId));
}

Cursor_card_access_rules Db_cardsdb::Get_card_access_rules_Rows (
    RDM_ROWID_T rowId
    ) const throw (const rdm_exception&)
{
    return Cursor_card_access_rules (_GetRows (Cursor_card_access_rules::GetTableId (), rowId));
}

Cursor_card_info Db_cardsdb::Get_card_info_RowsBy_token_digest (
    const uint8_t keyVal[35]
    ) const throw (const rdm_exception&)
{
    return _GetRowsByKey (KEY_CARD_INFO_TOKEN_DIGEST, keyVal, sizeof(uint8_t[35]));
}

Cursor_card_info Db_cardsdb::Get_card_info_RowsBy_token_digest (
    void
    ) const throw (const rdm_exception&)
{
    return Cursor_card_info (_GetRowsByKey (KEY_CARD_INFO_TOKEN_DIGEST));
}

Cursor_card_info Db_cardsdb::Get_card_info_RowsBy_token_digest_InRange (
    uint8_t start_val,
    uint8_t end_val
    ) const throw (const rdm_exception&)
{
    RDM_SEARCH_KEY startValue = {&start_val, sizeof(uint8_t), 0, 0};
    RDM_SEARCH_KEY endValue = {&end_val, sizeof(uint8_t), 0 , 0};

    return _GetRowsByKeyInRange(KEY_CARD_INFO_TOKEN_DIGEST, &startValue, &endValue);
}

Cursor_card_info Db_cardsdb::Get_card_info_RowsBy_token_digest_InRange (
    uint8_t start_val
    ) const throw (const rdm_exception&)
{
    RDM_SEARCH_KEY startValue = {&start_val, sizeof(uint8_t), 0, 0};

    return _GetRowsByKeyInRange(KEY_CARD_INFO_TOKEN_DIGEST, &startValue, NULL);
}

Cursor_card_info Db_cardsdb::Get_card_info_RowsBy_token_digest_InRange (
    const CARD_INFO_TOKEN_DIGEST_KEY &start_val,
    const CARD_INFO_TOKEN_DIGEST_KEY &end_val        ) const throw (const rdm_exception&)
{
    RDM_SEARCH_KEY startValue = {&start_val, sizeof(CARD_INFO_TOKEN_DIGEST_KEY), 0, 0};
    RDM_SEARCH_KEY endValue = {&end_val, sizeof(CARD_INFO_TOKEN_DIGEST_KEY), 0, 0};

    return _GetRowsByKeyInRange(KEY_CARD_INFO_TOKEN_DIGEST, &startValue, &endValue);
}

Cursor_card_info Db_cardsdb::Get_card_info_RowsBy_token_digest_InRange (
    const CARD_INFO_TOKEN_DIGEST_KEY &start_val        ) const throw (const rdm_exception&)
{
    RDM_SEARCH_KEY startValue = {&start_val, sizeof(CARD_INFO_TOKEN_DIGEST_KEY), 0, 0};

    return _GetRowsByKeyInRange(KEY_CARD_INFO_TOKEN_DIGEST, &startValue, NULL);
}

RDM_TABLE_ID Cursor_card_info::GetTableId (
    void
    )
{
    return TABLE_CARD_INFO;
}

Cursor_card_info::Cursor_card_info (
    void
    ) throw ()
{
}

Cursor_card_info::Cursor_card_info (
    const Cursor& cursor
    ) throw (const rdm_exception&) : Cursor (cursor, GetTableId ())
{
}

Cursor_card_info::Cursor_card_info (
    const Cursor_card_info& cursor
    ) throw () : Cursor (cursor)
{
}

Cursor_card_info& Cursor_card_info::operator = (
    const Cursor& cursor
    ) throw (const rdm_exception&)
{
    return static_cast<Cursor_card_info&>(_AssignAndVerifyTableId (GetTableId (), cursor)); /*lint !e1772 ('*this' is being returned from the called function) */ /*lint !e1774 (_AssignAndVerifyTableId will make sure this is the right table id, so static_check is sufficient) */
} /*lint !e1529 (checking for assignment to 'this' in the called function) */

Cursor_card_info& Cursor_card_info::operator = (
    const Cursor_card_info& cursor
    ) throw ()
{
    return static_cast<Cursor_card_info&>(_AssignAndVerifyTableId (GetTableId (), static_cast<const Cursor&>(cursor))); /*lint !e1772 ('*this' is being returned from the called function) */ /*lint !e1774 (AssignAndVerifyTableId will make sure this is the right table id, so static_check is sufficient) */
} /*lint !e1529 (checking for assignment to 'this' in the called function) */

Cursor_card_info Cursor_card_info::GetRowsBy_token_digest (
    void
    ) const throw (const rdm_exception&)
{
    return Cursor_card_info (_GetRowsByKeyAtPosition (KEY_CARD_INFO_TOKEN_DIGEST));
}

void Cursor_card_info::MoveTo_token_digest (
    const uint8_t key_val[35]    ) const throw (const rdm_exception&)
{
    RDM_SEARCH_KEY searchKey = { key_val, sizeof(uint8_t[35]), 0, 0 };
    _MoveToKey(KEY_CARD_INFO_TOKEN_DIGEST, &searchKey);
}

void Cursor_card_info::UpdateRow (
    const CARD_INFO &columnValues
    ) const throw (const rdm_exception&)
{
    Cursor::_UpdateRow (&columnValues);
}

void Cursor_card_info::ReadRow (
    CARD_INFO &columnValues
    ) const throw (const rdm_exception&)
{
    Cursor::_ReadRow (&columnValues);
}

void Cursor_card_info::Update_access_rules_record_addr (
    const uint64_t &columnValue
    ) const throw (const rdm_exception&)
{
    _UpdateColumn (COL_CARD_INFO_ACCESS_RULES_RECORD_ADDR, &columnValue);
}

void Cursor_card_info::Read_access_rules_record_addr (
    uint64_t &columnValue
    ) const throw (const rdm_exception&)
{
    _ReadColumn (COL_CARD_INFO_ACCESS_RULES_RECORD_ADDR, &columnValue);
}

void Cursor_card_info::Update_card_access_type (
    const uint8_t &columnValue
    ) const throw (const rdm_exception&)
{
    _UpdateColumn (COL_CARD_INFO_CARD_ACCESS_TYPE, &columnValue);
}

void Cursor_card_info::Read_card_access_type (
    uint8_t &columnValue
    ) const throw (const rdm_exception&)
{
    _ReadColumn (COL_CARD_INFO_CARD_ACCESS_TYPE, &columnValue);
}

void Cursor_card_info::Update_token_digest (
    const uint8_t columnValue[35]
    ) const throw (const rdm_exception&)
{
    _UpdateColumn (COL_CARD_INFO_TOKEN_DIGEST, columnValue);
}

void Cursor_card_info::Read_token_digest (
    uint8_t columnValue[35]
    ) const throw (const rdm_exception&)
{
    _ReadColumn (COL_CARD_INFO_TOKEN_DIGEST, columnValue);
}

void Cursor_card_info::Update_last_digits (
    const char columnValue[5]
    ) const throw (const rdm_exception&)
{
    _UpdateColumn (COL_CARD_INFO_LAST_DIGITS, columnValue);
}

void Cursor_card_info::Read_last_digits (
    char columnValue[5]
    ) const throw (const rdm_exception&)
{
    _ReadColumn (COL_CARD_INFO_LAST_DIGITS, columnValue);
}

Cursor_card_info::~Cursor_card_info ()
{
}

RDM_TABLE_ID Cursor_card_access_rules::GetTableId (
    void
    )
{
    return TABLE_CARD_ACCESS_RULES;
}

Cursor_card_access_rules::Cursor_card_access_rules (
    void
    ) throw ()
{
}

Cursor_card_access_rules::Cursor_card_access_rules (
    const Cursor& cursor
    ) throw (const rdm_exception&) : Cursor (cursor, GetTableId ())
{
}

Cursor_card_access_rules::Cursor_card_access_rules (
    const Cursor_card_access_rules& cursor
    ) throw () : Cursor (cursor)
{
}

Cursor_card_access_rules& Cursor_card_access_rules::operator = (
    const Cursor& cursor
    ) throw (const rdm_exception&)
{
    return static_cast<Cursor_card_access_rules&>(_AssignAndVerifyTableId (GetTableId (), cursor)); /*lint !e1772 ('*this' is being returned from the called function) */ /*lint !e1774 (_AssignAndVerifyTableId will make sure this is the right table id, so static_check is sufficient) */
} /*lint !e1529 (checking for assignment to 'this' in the called function) */

Cursor_card_access_rules& Cursor_card_access_rules::operator = (
    const Cursor_card_access_rules& cursor
    ) throw ()
{
    return static_cast<Cursor_card_access_rules&>(_AssignAndVerifyTableId (GetTableId (), static_cast<const Cursor&>(cursor))); /*lint !e1772 ('*this' is being returned from the called function) */ /*lint !e1774 (AssignAndVerifyTableId will make sure this is the right table id, so static_check is sufficient) */
} /*lint !e1529 (checking for assignment to 'this' in the called function) */

void Cursor_card_access_rules::UpdateRow (
    const CARD_ACCESS_RULES &columnValues
    ) const throw (const rdm_exception&)
{
    Cursor::_UpdateRow (&columnValues);
}

void Cursor_card_access_rules::ReadRow (
    CARD_ACCESS_RULES &columnValues
    ) const throw (const rdm_exception&)
{
    Cursor::_ReadRow (&columnValues);
}

void Cursor_card_access_rules::Update_access_data (
    const uint8_t columnValue[500]
    ) const throw (const rdm_exception&)
{
    _UpdateColumn (COL_CARD_ACCESS_RULES_ACCESS_DATA, columnValue);
}

void Cursor_card_access_rules::Read_access_data (
    uint8_t columnValue[500]
    ) const throw (const rdm_exception&)
{
    _ReadColumn (COL_CARD_ACCESS_RULES_ACCESS_DATA, columnValue);
}

Cursor_card_access_rules::~Cursor_card_access_rules ()
{
}

